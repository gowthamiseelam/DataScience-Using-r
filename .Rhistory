})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- fread(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/5F1-DSUR/textfile.txt")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/5F1-DSUR/rain.csv")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:\5F1-DSUR\rain.csv")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/5F1-DSUR/rain.csv")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/5F1-DSUR/rain.csv")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/5F1-DSUR/rain.csv")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/5F1-DSUR/output_local_csv.xlsx")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/5F1-DSUR/output_local_csv.csv")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
if (!requireNamespace("XML", quietly = TRUE)) {
install.packages("XML")
}
if (!requireNamespace("data.table", quietly = TRUE)) {
install.packages("data.table")
}
library(readxl)
library(XML)
library(data.table)
read_file_by_type <- function(file_path) {
file_extension <- tolower(tools::file_ext(file_path))
if (file_extension == "txt") {
cat("Detected .txt file. Reading as plain text...\n")
data <- readLines(file_path)
} else if (file_extension == "csv") {
cat("Detected .csv file. Reading as CSV...\n")
data <- read.csv(file_path) # Using fread for efficiency
} else if (file_extension == "xlsx") {
cat("Detected .xlsx file. Reading as Excel (first sheet)...\n")
data <- read_excel(file_path)
} else if (file_extension == "xml") {
cat("Detected .xml file. Reading as XML...\n")
data <- xmlParse(file_path)
} else {
stop("Unsupported file type. Please provide a .txt, .csv, .xlsx, or .xml file.")
}
return(data)
}
writeLines(c("Line 1", "Line 2", "Line 3"), "example.txt")
write.csv(data.frame(col1 = 1:3, col2 = letters[1:3]), "example.csv", row.names = FALSE)
tryCatch({
txt_data <- read_file_by_type("D:/Projects/output_local_csv.csv")
print(txt_data)
}, error = function(e) {
message("An error occurred: ", e$message)
})
file.remove("example.txt", "example.csv")
require(foreign)
require(MASS)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
# Load required libraries
library(foreign)
require(MASS)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
# Load required libraries
library(foreign)
require(MASS)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
# Load required libraries
library(foreign)
library(MASS)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
# Load required libraries
library(foreign)
library(MASS)
library(ggplot2)
library(caTools)
# Load required libraries
library(foreign)
library(MASS)
install.packages('caTools')
library(ggplot2)
library(caTools)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
plot(data)
# Load required libraries
library(foreign)
library(MASS)
library(ggplot2)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
admission_data$admit <- as.factor(admission_data$admit)
admission_data$rank <- as.factor(admission_data$rank)
# Review the data structure
str(admission_data)
# Create a two-way table for admission status and rank to see their relationship
xtabs(~admit + rank, data = admission_data)
# Load required libraries
library(foreign)
library(MASS)
library(ggplot2)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
admission_data$admit <- as.factor(admission_data$admit)
admission_data$rank <- as.factor(admission_data$rank)
# Review the data structure
str(admission_data)
# Create a two-way table for admission status and rank to see their relationship
xtabs(~admit + rank, data = admission_data)
# Build the logistic regression model
model <- glm(admit ~ gre + gpa + rank, data = admission_data, family = "binomial")
# Get a summary of the model
summary(model)
# Load required libraries
library(foreign)
library(MASS)
library(ggplot2)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
admission_data$admit <- as.factor(admission_data$admit)
admission_data$rank <- as.factor(admission_data$rank)
# Review the data structure
str(admission_data)
# Create a two-way table for admission status and rank to see their relationship
xtabs(~admit + rank, data = admission_data)
# Build the logistic regression model
model <- glm(admit ~ gre + gpa + rank, data = admission_data, family = "binomial")
# Get a summary of the model
summary(model)
# Perform a Chi-square test
with(model, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
# Create a data frame for new, unseen data
new_data <- data.frame(
wt = c(2.5, 3.0),
hp = c(120, 180)
)
# Predict mpg for the new data
predictions <- predict(prediction_model, newdata = new_data)
# Load required libraries
library(foreign)
library(MASS)
library(ggplot2)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
admission_data$admit <- as.factor(admission_data$admit)
admission_data$rank <- as.factor(admission_data$rank)
# Review the data structure
str(admission_data)
# Create a two-way table for admission status and rank to see their relationship
xtabs(~admit + rank, data = admission_data)
# Build the logistic regression model
model <- glm(admit ~ gre + gpa + rank, data = admission_data, family = "binomial")
# Get a summary of the model
summary(model)
# Perform a Chi-square test
with(model, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
# Create a data frame for new, unseen data
new_data <- data.frame(
wt = c(2.5, 3.0),
hp = c(120, 180)
)
# Predict mpg for the new data
predictions <- predict(model, newdata = new_data)
# Load required libraries
library(foreign)
library(MASS)
library(ggplot2)
# Name the dataset
admission_data <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(admission_data)
admission_data$admit <- as.factor(admission_data$admit)
admission_data$rank <- as.factor(admission_data$rank)
# Review the data structure
str(admission_data)
# Create a two-way table for admission status and rank to see their relationship
xtabs(~admit + rank, data = admission_data)
# Build the logistic regression model
model <- glm(admit ~ gre + gpa + rank, data = admission_data, family = "binomial")
# Get a summary of the model
summary(model)
# Perform a Chi-square test
with(model, pchisq(null.deviance - deviance, df.null - df.residual, lower.tail = FALSE))
# Create a data frame for new, unseen data
new_data <- data.frame(
wt = c(2.5, 3.0),
hp = c(120, 180)
)
# Predict mpg for the new data
predictions <- predict(model, newdata = new_data)
load("D:/5F1-DSUR/Calcii.RData")
load("D:/5F1-DSUR/Calc.RData")
View(csv_data)
View(iris)
